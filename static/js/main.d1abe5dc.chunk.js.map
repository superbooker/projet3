{"version":3,"sources":["getWeb3.js","components/Events/index.js","components/SideBar/index.js","votelogo.jpg","components/Header/index.js","components/Role/index.js","components/AddVoter/index.js","components/VoterList/index.js","components/InfoVoter/index.js","components/AddProposal/index.js","components/ListProposals/index.js","components/VotingFor/index.js","components/WinnerView/index.js","components/ProposalDetail/index.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","enable","on","alert","location","reload","console","log","provider","providers","HttpProvider","Events","SideBar","props","useState","workflowStatus","selectedWorkflowStatus0","setSelectedWorkflowStatus0","selectedWorkflowStatus1","setSelectedWorkflowStatus1","selectedWorkflowStatus2","setSelectedWorkflowStatus2","selectedWorkflowStatus3","setSelectedWorkflowStatus3","selectedWorkflowStatus4","setSelectedWorkflowStatus4","selectedWorkflowStatus5","setSelectedWorkflowStatus5","handleClick","e","isAdmin","currentTarget","value","unselectAllButtons","contract","methods","startProposalsRegistering","send","from","accounts","response","events","WorkflowStatusChange","returnValues","newStatus","setWorkflowStatus","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","winningProposalID","call","responseWinningProposalID","setWinningProposalID","ToggleButtonGroup","orientation","color","exclusive","ToggleButton","selected","onClick","disabled","Header","addr","id","class","Box","component","sx","height","width","maxHeight","xs","md","maxWidth","alt","src","logo","fontSize","Role","isVoter","AddVoter","m","flexDirection","noValidate","autoComplete","TextField","label","variant","onChange","evt","address1","target","Button","style","minWidth","exec","addVoter","valueEvent","VoterRegistered","voterAddress","setNumberOfVoter","numberOfVoter","VoterList","voterAddresses","length","TableContainer","Paper","Table","maxWitdh","TableHead","TableRow","TableCell","TableBody","map","event","border","scope","InfoVoter","getVoter","JSON","stringify","AddProposal","_proposition","addProposal","ProposalRegistered","proposalId","ListProposals","proposalList","index","description","VotingFor","_id","setVote","parseInt","Voted","WinnerView","winningProposalDesc","ProposalDetail","getOneProposal","App","setWeb3","setAccounts","setContract","setVoterAddresses","setIsAdmin","setIsVoter","setProposalList","numberOfProposal","setNumberOfProposal","useEffect","web3Provider","eth","getAccounts","net","getId","networkId","deployedNetwork","Voting","networks","instance","Contract","abi","address","options","fromBlock","toBlock","options1","getPastEvents","_voterAddresses","push","find","optionsProposals","optionsProposals1","_proposalList","_workflowStatus","owner","ownerAddress","error","setUpWeb3","className","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1abe5dc.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      // Si Metamask est installé sur le navigateur\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          // Recup des comptes\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          window.ethereum.on('disconnect',function(){\n            alert(\"il faut se connecter\");\n          });\n          window.ethereum.on('accountsChanged',function(){\n            window.location.reload();\n          });     \n          window.ethereum.on('chainChanged',function(){\n            window.location.reload();\n          });\n       \n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;","// == Import\nimport PropTypesLib from 'prop-types';\n\n// == Composant\nfunction Events({ addresses }) {\n  return (\n    <table>\n      <tbody>\n        {addresses.map((item) => {\n            return (\n              <tr key={item.id}>\n                <td>{item.returnValues.addr}</td>\n              </tr>\n            );\n          }\n        )}\n      </tbody>\n    </table>\n  );\n};\n\n// Vérification du type des props\nEvents.propTypes = {\n  addresses: PropTypesLib.array.isRequired,\n};\n\n// == Export\nexport default Events;\n","// == Import\n// import PropTypesLib from 'prop-types';\nimport { Button, ToggleButtonGroup, ToggleButton } from '@mui/material';\nimport { Typography } from '@mui/material';\nimport { ButtonGroup } from '@mui/material';\nimport { useState } from \"react\";\nimport \"./index.css\";\n\n// == Composant\nfunction SideBar(props) {\n\n    const [selectedWorkflowStatus0, setSelectedWorkflowStatus0] = useState(props.workflowStatus==0);\n    const [selectedWorkflowStatus1, setSelectedWorkflowStatus1] = useState(props.workflowStatus==1);\n    const [selectedWorkflowStatus2, setSelectedWorkflowStatus2] = useState(props.workflowStatus==2);\n    const [selectedWorkflowStatus3, setSelectedWorkflowStatus3] = useState(props.workflowStatus==3);\n    const [selectedWorkflowStatus4, setSelectedWorkflowStatus4] = useState(props.workflowStatus==4);\n    const [selectedWorkflowStatus5, setSelectedWorkflowStatus5] = useState(props.workflowStatus==5);\n\n    const handleClick = async (e) => {\n        if(!props.isAdmin) return;\n        if (props.workflowStatus == e.currentTarget.value) return;\n\n        unselectAllButtons();\n        console.log(\"selected : \" + e.currentTarget.value);\n\n        if(e.currentTarget.value === \"0\"){\n            // setSelectedWorkflowStatus0(true);    \n        }\n        else if(e.currentTarget.value === \"1\"){\n\n            const response = await props.contract.methods.startProposalsRegistering().send({ from: props.accounts[0] });\n\n            const newStatus = response.events.WorkflowStatusChange.returnValues.newStatus;\n\n            if(newStatus == 1){\n                setSelectedWorkflowStatus1(true);\n                props.setWorkflowStatus(1);\n            }\n\n        }\n        else if(e.currentTarget.value === \"2\"){\n            // setSelectedWorkflowStatus2(true);\n            const response = await props.contract.methods.endProposalsRegistering().send({ from: props.accounts[0] });\n\n            const newStatus = response.events.WorkflowStatusChange.returnValues.newStatus;\n\n            if(newStatus == 2){\n                setSelectedWorkflowStatus2(true);\n                props.setWorkflowStatus(2);\n            }\n        }\n        else if(e.currentTarget.value === \"3\"){\n\n            const response = await props.contract.methods.startVotingSession().send({ from: props.accounts[0] });\n\n            const newStatus = response.events.WorkflowStatusChange.returnValues.newStatus;\n\n            if(newStatus == 3){\n                setSelectedWorkflowStatus3(true);\n                props.setWorkflowStatus(3);\n            }\n        }\n        else if(e.currentTarget.value === \"4\"){\n            const response = await props.contract.methods.endVotingSession().send({ from: props.accounts[0] });\n\n            const newStatus = response.events.WorkflowStatusChange.returnValues.newStatus;\n\n            if(newStatus == 4){\n                setSelectedWorkflowStatus4(true);\n                props.setWorkflowStatus(4);\n            }\n        }\n        else if(e.currentTarget.value === \"5\"){\n            const response = await props.contract.methods.tallyVotes().send({ from: props.accounts[0] });\n\n            const newStatus = response.events.WorkflowStatusChange.returnValues.newStatus;\n\n            const responseWinningProposalID = await props.contract.methods.winningProposalID().call();\n            props.setWinningProposalID(responseWinningProposalID);\n  \n            if(newStatus == 5){\n                setSelectedWorkflowStatus5(true);\n                props.setWorkflowStatus(5);\n                props.setWinningProposalID(responseWinningProposalID);\n            }\n        }\n    };\n\n    return (\n        // <div>\n        //     <Typography variant=\"h1\" >\n        //         Create new\n        //     </Typography>\n        // </div>\n        <div>\n        <h3>Phase actuelle de vote</h3>\n        <ToggleButtonGroup\n            orientation=\"vertical\"\n            color=\"primary\"\n            exclusive\n        >\n            <ToggleButton value=\"0\" selected = {selectedWorkflowStatus0} onClick={handleClick} disabled={!selectedWorkflowStatus0}>1. Enregistrement des votants</ToggleButton>\n            <ToggleButton value=\"1\" selected = {selectedWorkflowStatus1} onClick={handleClick} disabled={!selectedWorkflowStatus1 && !selectedWorkflowStatus0}>2. Debut des propositions des votants</ToggleButton>\n            <ToggleButton value=\"2\" selected = {selectedWorkflowStatus2} onClick={handleClick} disabled={!selectedWorkflowStatus2 && !selectedWorkflowStatus1}>3. Fin des propositions des votants</ToggleButton>\n            <ToggleButton value=\"3\" selected = {selectedWorkflowStatus3} onClick={handleClick} disabled={!selectedWorkflowStatus3 && !selectedWorkflowStatus2}>4. Debut des votes</ToggleButton>\n            <ToggleButton value=\"4\" selected = {selectedWorkflowStatus4} onClick={handleClick} disabled={!selectedWorkflowStatus4 && !selectedWorkflowStatus3}>5. Fin des votes</ToggleButton>\n            <ToggleButton value=\"5\" selected = {selectedWorkflowStatus5} onClick={handleClick} disabled={!selectedWorkflowStatus5 && !selectedWorkflowStatus4}>6. Dépouillage effectué</ToggleButton>\n        </ToggleButtonGroup>\n        </div>\n        // <ButtonGroup>\n        //     <Button> ONE </Button>\n        //     <Button> TWO </Button>\n        // </ButtonGroup>\n    );\n\n    function unselectAllButtons(){\n        setSelectedWorkflowStatus0(false);\n        setSelectedWorkflowStatus1(false);\n        setSelectedWorkflowStatus2(false);\n        setSelectedWorkflowStatus3(false);\n        setSelectedWorkflowStatus4(false);\n        setSelectedWorkflowStatus5(false);\n    };\n    \n};\n\n\n\n// // Vérification du type des props\n// Events.propTypes = {\n//   addresses: PropTypesLib.array.isRequired,\n// };\n\n// == Export\nexport default SideBar;\n","export default __webpack_public_path__ + \"static/media/votelogo.8c5e81f6.jpg\";","// == Composant\nimport { Box } from \"@mui/material\";\nimport { Paper } from \"@mui/material\";\nimport logo from '../../votelogo.jpg';\nimport \"./index.css\";\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\n\nfunction Header(props) {\n  if(!props.addr) return;\n\n  return (\n    <div id=\"displayFlex\" class=\"header\">\n        <Box\n        component=\"img\"\n        sx={{\n          height: 70,\n          width: 70,\n          maxHeight: { xs: 233, md: 167 },\n          maxWidth: { xs: 350, md: 250 },\n        }}\n        alt=\"The house from the offer.\"\n        src={logo}\n      />\n        <h2 class=\"middlePosition\">Vote d'amélioration des repas de la cantine Alyra</h2>\n        <div>\n            <AccountBalanceWalletIcon fontSize='small' class='horizontalCenter'></AccountBalanceWalletIcon> \n            <p class=\"rightPosition\">{props.addr}</p>\n        </div>\n    </div>\n  );\n};\n \n\n// == Export\nexport default Header;\n\n","function Role(props) {   \n    console.log(\"isAdmin \" + props.isAdmin);\n  return (\n    <div>\n        <h3>{(props.isAdmin) ? \"Votre role est : Admin\" : \"\"}</h3>\n        <h4>{(!props.isVoter && !props.isAdmin) ? \"Veuillez demander à l'administrateur de vous ajouter en tant que votant\" : \"\"}</h4>\n    </div>\n  );\n};\n \n\n// == Export\nexport default Role;\n\n","import Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\nfunction AddVoter(props) { \n    console.log(\"isAdmin \" + props.isAdmin);\n    if(props.isAdmin == false || props.workflowStatus != 0) return null;\n\n    let address1;\n\n    return (\n        <Box\n        component=\"form\"\n        sx={{\n          '& > :not(style)': { m: 1, width: '45ch' },\n          flexDirection: 'column',\n        }}\n        noValidate\n        autoComplete=\"off\"\n      >\n        <h4> Ajouter un votant </h4>\n        <TextField \n        id=\"outlined-basic\" \n        label=\"Adresse à ajouter\" \n        variant=\"outlined\" \n        onChange={(evt) => {\n            address1 = evt.target.value;\n            console.log(\"@ \" + address1);}} /> \n\n        {/* <TextField id=\"filled-basic\" label=\"Adresse à ajouter\" variant=\"filled\" /> */}\n        {/* <TextField id=\"standard-basic\" label=\"Adresse à ajouter\" variant=\"standard\" /> */}\n        <br/>\n        <Button \n        variant=\"outlined\"\n        style={{minWidth: '250px'}}\n        onClick={async (e) => { \n            const str = address1;\n\n            const regex = /(0x[a-f0-9]*)/g;\n\n            let m;\n            \n            // console.log(\"addr \" + address1 + \" match \" + regex.exec(str));\n\n            if((m = regex.exec(str)) !== null){\n                const response = await props.contract.methods.addVoter(address1).send({ from: props.accounts[0] });\n            \n                const valueEvent = response.events.VoterRegistered.returnValues.voterAddress;\n                if(valueEvent){\n                    props.setNumberOfVoter(props.numberOfVoter+1);\n                    window.alert(\"Votant ajouté \" + valueEvent);\n                    \n                    window.location.reload(false);\n                }\n                else{\n                    window.alert(\"Erreur\");\n                }\n    \n                // console.log(response);            \n            }\n            else{\n                window.alert(\"Veuillez entrer une adresse valide\");\n            }\n         }}\n        >\n            Ajouter</Button>\n            <hr class=\"solid\"/>\n      </Box>\n  \n  \n\n    //   <div>\n    //     <h4> Ajouter un votant </h4>\n    //       Votre role est : {props.role}\n    //   </div>\n    );\n  };\n   \n  \n  // == Export\n  export default AddVoter;\n  \n  ","import Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n  \nfunction VoterList(props) {\n  if (props.voterAddresses.length == 0) return;\n\n    console.log(\"voterAddressList : \" + props.voterAddresses);\n    // props.voterAddresses.map((event) => {\n    //     console.log(\"addr n° \" + event.returnValues.voterAddress);\n    // });\n    return (\n      <div> \n        <br/>\n        <TableContainer component={Paper}>\n          <Table sx={{ minWidth: 50, maxWitdh: 50 }} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell><b>Liste des votants enregistrés</b></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {props.voterAddresses.map((event) => (\n                <TableRow\n                  key={event.returnValues.voterAddress}\n                  sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                >\n                  <TableCell component=\"th\" scope=\"row\">\n                    {event.returnValues.voterAddress}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <br/>\n      </div>\n      );\n    };\n  \n  // == Export\n  export default VoterList;\n  \n  ","import Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\nfunction InfoVoter(props) {\n  if(!props.isVoter) return;\n\n  let address1;\n  let response;\n\n  return (\n      <div>\n          <h3>{(props.isVoter) ? \"Vous êtes un votant\" : \"\"}</h3>\n\n          <Box\n              component=\"form\"\n              sx={{\n                  '& > :not(style)': { m: 1, width: '45ch' },\n                  flexDirection: 'column',\n              }}\n              noValidate\n              autoComplete=\"off\"\n          >\n              <h4> Information sur le votant </h4>\n              <TextField\n                  id=\"outlined-basic\"\n                  label=\"Adresse à du votant\"\n                  variant=\"outlined\"\n                  onChange={(evt) => {\n                      address1 = evt.target.value;\n                      console.log(\"@ \" + address1);\n                  }} />\n\n              {/* <TextField id=\"filled-basic\" label=\"Adresse à ajouter\" variant=\"filled\" /> */}\n              {/* <TextField id=\"standard-basic\" label=\"Adresse à ajouter\" variant=\"standard\" /> */}\n              <br />\n              <Button\n                  variant=\"outlined\"\n                  style={{ minWidth: '250px' }}\n                  onClick={async (e) => {\n                      const str = address1;\n\n                      const regex = /(0x[a-f0-9]*)/g;\n\n                      let m;\n\n                      // console.log(\"addr \" + address1 + \" match \" + regex.exec(str));\n                      if ((m = regex.exec(str)) !== null) {\n                          const response = await props.contract.methods.getVoter(address1).call({ from: props.accounts[0] });\n\n                          console.log(\"InfoVoter response \" + JSON.stringify(response));\n\n                          if (response) {\n                            if(!response[1]){\n                                window.alert(\"Votant : \" + address1 + \"\\nEnregistré : \" + (response[0] ? \"Oui\" : \"Non\") + \"\\nA voté : \" + (response[1] ? \"Oui\" : \"Non\"));\n                            }\n                            else{\n                                window.alert(\"Votant : \" + address1 + \"\\nEnregistré : \" + (response[0] ? \"Oui\" : \"Non\") + \"\\nA voté : \" + (response[1] ? \"Oui\" : \"Non\") + \"\\nIndex de la proposition votée : \" + response[2]);\n                            }\n                          }\n                          else {\n                              window.alert(\"Erreur\");\n                          }\n\n                          // console.log(response);            \n                      }\n                      else {\n                          window.alert(\"Veuillez entrer une adresse valide\");\n                      }\n                  }}\n              >\n                  Chercher </Button>\n          </Box>\n          <hr class=\"solid\"/>\n      </div>\n  );\n\n};\n \n\n// == Export\nexport default InfoVoter;\n\n","import Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\nfunction AddProposal(props) {\n  if(!props.isVoter || props.workflowStatus != 1) return;\n\n  let _proposition;\n  let response;\n\n  return (\n      <div>\n          <Box\n              component=\"form\"\n              sx={{\n                  '& > :not(style)': { m: 1, width: '45ch' },\n                  flexDirection: 'column',\n              }}\n              noValidate\n              autoComplete=\"off\"\n          >\n              <h4> Ajouter une proposition </h4>\n              <TextField\n                  id=\"outlined-basic\"\n                  label=\"Description une proposition\"\n                  variant=\"outlined\"\n                  onChange={(evt) => {\n                      _proposition = evt.target.value;\n                      console.log(\"@ \" + _proposition);\n                  }} />\n\n              {/* <TextField id=\"filled-basic\" label=\"Adresse à ajouter\" variant=\"filled\" /> */}\n              {/* <TextField id=\"standard-basic\" label=\"Adresse à ajouter\" variant=\"standard\" /> */}\n              <br />\n              <Button\n                  variant=\"outlined\"\n                  style={{ minWidth: '150px' }}\n                  onClick={async (e) => {\n\n                    const regex = /([a-f0-9]+)/g;\n\n                    let m;\n                    \n                    // console.log(\"addr \" + address1 + \" match \" + regex.exec(str));\n        \n                    if(_proposition){\n        console.log(\"_proposition : \" + _proposition);\n                      // console.log(\"addr \" + _proposition + \" match \" + regex.exec(str));\n                      const response = await props.contract.methods.addProposal(_proposition).send({ from: props.accounts[0] });\n\n                      const valueEvent = response.events.ProposalRegistered.returnValues.proposalId;\n                      if(valueEvent){\n                          window.alert(\"Proposition #\" + valueEvent + \" : '\" + _proposition + \"' ajoutée\");\n                          window.location.reload(false);\n                      }\n                      else{\n                          window.alert(\"Erreur\");\n                      }\n                    }\n                    else{\n                        window.alert(\"Vous n'avez rien proposé. Merci de proposer une idée de vote.\");\n                    }\n                  }}\n              >\n                  Ajouter </Button>\n          </Box>\n          <hr class=\"solid\" />\n      </div>\n  );\n\n};\n \n\n// == Export\nexport default AddProposal;\n\n","import Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n  \nfunction ListProposals(props) {\n  if(!props.isVoter || props.workflowStatus < 1) return;\n\n    console.log(\"proposalList : \" + JSON.stringify(props.proposalList));\n    // props.voterAddresses.map((event) => {\n    //     console.log(\"addr n° \" + event.returnValues.voterAddress);\n    // });\n    return (\n        <TableContainer component={Paper}>\n          <Table sx={{ minWidth: 50, maxWitdh: 50 }} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell><b>Liste des propositions</b></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {props.proposalList.map((event, index) => (\n                <TableRow\n                  key={index}\n                  sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                >\n                  <TableCell component=\"th\" scope=\"row\">\n                    {\"Proposition #\" + index + \" : \" + event.returnValues.description}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      );\n    };\n  \n  // == Export\n  export default ListProposals;\n  \n  ","import Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\nfunction VotingFor(props) {\n  if(!props.isVoter || props.workflowStatus != 3) return;\n\n  let _id;\n  let response;\n\n  return (\n      <div>\n          <Box\n              component=\"form\"\n              sx={{\n                  '& > :not(style)': { m: 1, width: '45ch' },\n                  flexDirection: 'column',\n              }}\n              noValidate\n              autoComplete=\"off\"\n          >\n              <h4> Je vote pour </h4>\n              <TextField\n                  id=\"outlined-basic\"\n                  label=\"Index de la proposition\"\n                  variant=\"outlined\"\n                  onChange={(evt) => {\n                      _id = evt.target.value;\n                      console.log(\"@ \" + _id);\n                  }} />\n\n              {/* <TextField id=\"filled-basic\" label=\"Adresse à ajouter\" variant=\"filled\" /> */}\n              {/* <TextField id=\"standard-basic\" label=\"Adresse à ajouter\" variant=\"standard\" /> */}\n              <br />\n              <Button\n                  variant=\"outlined\"\n                  style={{ minWidth: '250px' }}\n                  onClick={async (e) => {\n\n                    const regex = /([0-9]+)/g;\n\n                    let m;\n                    \n                    // console.log(\"addr \" + address1 + \" match \" + regex.exec(str));\n        \n                    if(_id){\n                      // console.log(\"addr \" + _id + \" match \" + regex.exec(str));\n                      const response = await props.contract.methods.setVote(parseInt(_id)).send({ from: props.accounts[0] });\n\n\n                      const valueEvent = response.events.Voted.returnValues.proposalId;\n                      \n                      console.log(\"_id : \" + _id + \" props.proposalList[_id] :\" + props.proposalList[_id].returnValues.description + \" valueEvent \" + valueEvent);\n\n                      if(valueEvent){\n                          window.alert(\"Vous avez voté pour la proposition #\" + valueEvent + \" : '\" + props.proposalList[_id].returnValues.description + \"'\");\n                        //   window.location.reload(false);\n                      }\n                      else{\n                          window.alert(\"Erreur\");\n                      }\n                    }\n                    else{\n                        window.alert(\"Mauvais index\");\n                    }\n                  }}\n              >\n                  Voter </Button>\n          </Box>\n          <hr class=\"solid\"/>\n      </div>\n  );\n\n};\n \n\n// == Export\nexport default VotingFor;\n\n","import \"./index.css\";\n\n\nfunction WinnerView(props) {  \n    if (props.workflowStatus != 5)  return;\n    \n    const winningProposalDesc = props.proposalList[props.winningProposalID].returnValues.description;\n    \n    return (\n    <div>\n        <center><h3>Le vote est terminée. <br/> La proposition vainqueure est :</h3></center>\n        <h1 id='rcorners'>{\"#\" + props.winningProposalID + \" : \" + winningProposalDesc}</h1>\n    </div>\n  );\n};\n \n\n// == Export\nexport default WinnerView;\n\n","import Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\nfunction ProposalDetail(props) {\n  if(!props.isVoter || props.workflowStatus < 1) return;\n\n  let index;\n\n  return (\n      <div>\n          <Box\n              component=\"form\"\n              sx={{\n                  '& > :not(style)': { m: 1, width: '45ch' },\n                  flexDirection: 'column',\n              }}\n              noValidate\n              autoComplete=\"off\"\n          >\n              <h4> Détail d'une proposition </h4>\n              <TextField\n                  id=\"outlined-basic\"\n                  label=\"index de la proposition\"\n                  variant=\"outlined\"\n                  onChange={(evt) => {\n                      index = evt.target.value;\n                      console.log(\"@ \" + index);\n                  }} />\n\n              {/* <TextField id=\"filled-basic\" label=\"Adresse à ajouter\" variant=\"filled\" /> */}\n              {/* <TextField id=\"standard-basic\" label=\"Adresse à ajouter\" variant=\"standard\" /> */}\n              <br />\n              <Button\n                  variant=\"outlined\"\n                  style={{ minWidth: '250px' }}\n                  onClick={async (e) => {\n                      const str = index;\n\n                      const regex = /([0-9]+)/g;\n\n                      let m;\n\n                      // console.log(\"addr \" + index + \" match \" + regex.exec(str));\n                      if ((m = regex.exec(str)) !== null) {\n                          const response = await props.contract.methods.getOneProposal(index).call({ from: props.accounts[0] });\n\n                          console.log(\"ProposalDetail response \" + JSON.stringify(response));\n\n                          if (response) {\n                            window.alert(\"Proposition #\" + index + \"\\nDescription : '\" + response[0] + \"'\\nNombre de voix : \" + response[1]);\n                          }\n                          else {\n                              window.alert(\"Erreur\");\n                          }\n                          // console.log(response);            \n                      }\n                      else {\n                          window.alert(\"Veuillez entrer un index valide\");\n                      }\n                  }}\n              >\n                  Chercher </Button>\n          </Box>\n          <hr class=\"solid\"/>\n      </div>\n  );\n\n};\n \n\n// == Export\nexport default ProposalDetail;\n\n","// == Import npm\nimport { useState, useEffect } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\n// == Import assets\nimport \"./App.css\";\n\n// == Import Components\nimport Events from './components/Events';\nimport SideBar from './components/SideBar';\nimport Header from './components/Header';\nimport Role from './components/Role';\nimport AddVoter from './components/AddVoter';\nimport VoterList from './components/VoterList';\nimport InfoVoter from './components/InfoVoter';\nimport AddProposal from './components/AddProposal';\nimport ListProposals from './components/ListProposals';\nimport VotingFor from './components/VotingFor';\nimport WinnerView from './components/WinnerView';\nimport ProposalDetail from './components/ProposalDetail';\n\n\n/*\n  On a déploy un contrat Voting sur ganache.\n  Ce contrat permet de set une valeur dans une variable d'état et de recup cette valeur.\n\n  On va se créer un Front en React pour intéragir avec ce contrat. Pour ça onn va utiliser la librairie web3js.\n  L'initialisation et la configuration de web3 dans notre Front se fait depuis le fichier getWeb3.js.\n  Il nous permet de recup les infos depuis Metamask.\n\n  Au montage du composant on va utiliser le provider web3 (metamask) pour plusieurs chose:\n  - Recup les comptes => dans le state\n  - Recup le network sur lequel l'utilisateur est connecté et sur lequel le contrat a été déployé (ganache)\n  - Pouvoir se faire une nouvelle instance de ce contrat => dans le state\n  - Recup la valeur de la variable d'état pour l'afficher => dans le state\n\n  Maintenant on va pouvoir intéragir avec ce contrat en executant ses fonctions\n  - Recup la variable d'état\n  - Ecrire dans cette variable d'état\n  - Recup les events pour les afficher\n\n  Il existe trois façon de recup les events d'un contrat :\n  - Lorsqu'on déclenche une Tx, on peut recup l'instance de cette Tx et recup l'event qu'elle a émit.\n      => Les console.log dans la fonction handleClick\n  - Recup tous les events antérieurs.\n      => Au moment du montage du composant dans le hook useEffect\n  - Ecouter les events du contrat en direct. Dès qu'un account va déclencher l'event qu'on écoute, on va pouvoir le recup.\n      => Au moment du montage du composant dans le hook useEffect\n\n*/\n\n// == Composant\nfunction App() {\n  const [web3, setWeb3] = useState(null);\n  const [accounts, setAccounts] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [voterAddresses, setVoterAddresses] = useState([]);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [isVoter, setIsVoter] = useState(false);\n  const [numberOfVoter, setNumberOfVoter] = useState(0);\n  const [workflowStatus, setWorkflowStatus] = useState(null);\n  const [proposalList, setProposalList] = useState([]);\n  const [numberOfProposal, setNumberOfProposal] = useState(0);\n  const [winningProposalID, setWinningProposalID] = useState(null);\n  \n\n  // Rendu initial du composant\n  useEffect(\n    // On veut recup les infos du contrat déployé au moment du montage du composant\n    // Pour ça on doit déclarer une fonction async dans le hook useEffect\n    () => {\n      async function setUpWeb3() {\n        try {\n          // On recup le provider Metamask installé sur le navigateur\n          const web3Provider = await getWeb3();\n    \n          // On recup les comptes\n          const accounts = await web3Provider.eth.getAccounts();\n    \n          // On recup l'id du network\n          const networkId = await web3Provider.eth.net.getId();\n          // On recup le network sur lequel on a deploy le contrat avec truffle migrate (on a l'info dans l'ABI du contrat ./contracts)\n          const deployedNetwork = Voting.networks[networkId];\n          // On crée une nouvelle instance du contrat via son ABI, le network et l'adresse sur laquel le contrat a été déployé\n          const instance = new web3Provider.eth.Contract(\n            Voting.abi,\n            deployedNetwork && deployedNetwork.address,\n          );\n\n          let options = {\n            fromBlock: 0,\n            toBlock: 'latest'\n          };\n    \n          let options1 = {\n            fromBlock: 'latest'\n          };\n    \n          // // On recup tous les events passés du contrat\n          let _voterAddresses = await instance.getPastEvents('VoterRegistered', options);\n\n          setVoterAddresses(_voterAddresses);\n          setNumberOfVoter(_voterAddresses.length);\n\n          // Ici on se met en écoute des émissions d'events. On rajoute chaque nouvel event dans le state\n          // L'avantage ici c'est qu'onv apouvoir recup tous les nouveaux events, même ceux déclenchés par d'autres accounts\n          await instance.events.VoterRegistered(options1).on('data', event => {\n            _voterAddresses.push(event);\n            voterAddresses.push(event);\n          });\n          console.log(\"AAA _voterAddresses : \" + JSON.stringify(_voterAddresses));\n          console.log(\"AAA accounts[0] : \" + accounts[0]);\n          setIsVoter(_voterAddresses.find((event)=> event.returnValues.voterAddress === accounts[0]) ? true : false);\n\n\n          //Récupération des propositions\n          let optionsProposals = {\n            fromBlock: 0,\n            toBlock: 'latest'\n          };\n    \n          let optionsProposals1 = {\n            fromBlock: 'latest'\n          };\n    \n          // // On recup tous les events passés du contrat\n          let _proposalList = await instance.getPastEvents('ProposalRegistered', optionsProposals);\n\n          setProposalList(_proposalList);\n          setNumberOfProposal(_proposalList.length);\n\n          // Ici on se met en écoute des émissions d'events. On rajoute chaque nouvel event dans le state\n          // L'avantage ici c'est qu'onv apouvoir recup tous les nouveaux events, même ceux déclenchés par d'autres accounts\n          await instance.events.ProposalRegistered(optionsProposals1).on('data', event => {\n            _proposalList.push(event);\n            proposalList.push(event);\n          });\n\n\n          //Récupération du workflowStatus\n          const _workflowStatus = await instance.methods.workflowStatus().call();\n          console.log(\"workflowStatus \" + _workflowStatus);\n\n          setWorkflowStatus(_workflowStatus);\n          \n          const response = await instance.methods.winningProposalID().call();\n          setWinningProposalID(response);\n          console.log('setWinningProposalID : ' + response);\n\n          const ownerAddress = await instance.methods.owner().call();\n          console.log(\"ownerAddress : \" + ownerAddress + \" accounts[0] : \" + accounts[0]);\n          if(ownerAddress == accounts[0]){\n            setIsAdmin(true);\n          }\n\n          // On mémorise dans le state les infos\n          // setStorageValue(response);\n          setWeb3(web3Provider); \n          setAccounts(accounts);\n          setContract(instance);\n          // setVoterAddresses(listVoterAddress);\n        } catch (error) {\n          alert(\n            `Failed to load web3, accounts, or contract. Check console for details.`,\n          );\n          console.error(error);\n        };\n      };\n\n      // On doit executer la fonction async\n      setUpWeb3();\n    },\n    []\n  );\n\n  const handleClick = async () => {\n    // // On ecrit sur la BC, donc await\n    // const receipt = await contract.methods.set(value).send({ from: accounts[0] });\n    // // On recup la nouvelle valeur\n    // const newValue = await contract.methods.get().call();\n    \n    // // On recup un event d'une transaction qu'on vient d'émettre !\n    // // Attention cependant : si on rajoute déjà les transactions dans le state depuis le useEffet,\n    // // le faire ici aussi fera doublon.\n    // // => Juste console.log() histoire de tester quand même\n    // console.log(\"l'adresse est celle ci: \" + receipt.events.SetValue.returnValues.addr);\n    // console.log(\"la data est celle ci: \" + receipt.events.SetValue.returnValues.newValue);\n    // console.log(receipt);\n\n    // // O la mémorise la nouvelle value dans le state\n    // setStorageValue(newValue);\n\n    // // UX: on vide le champ\n    // setValue(\"\");\n\n    // const receipt = await contract.methods.resetVote().send({ from: accounts[0] });\n    // console.log(\"receipt : \" + receipt);  \n\n    const response = await contract.methods.winningProposalID().call();\n    console.log(response);\n  }\n\n\n\n  if (!web3 || !accounts) {\n    console.log(\"no web3 found \" + accounts);\n    return <div>Loading Web3, accounts, and contract...</div>;\n  }\n  else{\n    console.log(\"web3 found \" + accounts);\n    return (\n      <div className=\"App\">  \n        <Header addr={accounts[0]}/>\n\n        <div class=\"sideBar\">\n          <SideBar isAdmin={isAdmin} workflowStatus={workflowStatus} setWorkflowStatus={setWorkflowStatus} contract={contract} accounts={accounts} winningProposalID={winningProposalID} setWinningProposalID={setWinningProposalID}/>        \n        </div>\n\n        <div class=\"principal\">\n          <br/>\n          {/* 1 */}\n          <Role isAdmin={isAdmin} isVoter={isVoter}/>\n\n          {/* 3 */}\n          <AddVoter isAdmin={isAdmin} contract={contract} accounts={accounts} numberOfVoter={numberOfVoter} setNumberOfVoter={setNumberOfVoter} workflowStatus={workflowStatus} />\n\n          {/* 6 */}\n          <InfoVoter isVoter={isVoter} contract={contract} accounts={accounts} />\n\n          {/* 7 */}\n          <AddProposal isVoter={isVoter} contract={contract} accounts={accounts} workflowStatus={workflowStatus} />\n\n          \n          {/* 8 */}\n          <ProposalDetail isVoter={isVoter} contract={contract} accounts={accounts} workflowStatus={workflowStatus} />\n\n          {/* 9 */}\n          <VotingFor isVoter={isVoter} proposalList={proposalList} contract={contract} accounts={accounts} workflowStatus={workflowStatus} />\n\n          {/* 10 */}\n          <WinnerView proposalList={proposalList} contract={contract} accounts={accounts} winningProposalID={winningProposalID} workflowStatus={workflowStatus}/>\n\n        </div>\n\n        <div class=\"rightSideBar\">\n          {/* 4 */}\n          <VoterList voterAddresses={voterAddresses}/>\n\n          {/* 2 */}\n          <ListProposals isVoter={isVoter} proposalList={proposalList} numberOfProposal={numberOfProposal} setNumberOfProposal={setNumberOfProposal} workflowStatus={workflowStatus}/>\n\n        </div>\n    \n      </div>\n    );  \n  }\n\n}\n\n// == Export\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}